************AYUDA:
git help [comando]

*Revisar Version:
git --version

*Crear Usuario de validacion:
git config --global user.name "[nombre de usuario]"

*Crear email de usuario de validacion:
git config --global user.email "[email (no necesita ser valido)]"

*Verificar datos de usuario:
git config --global -l

*Iniciar gestion de Git
git init

*Revisar estado del repositorio
git status

*Agregar todos los archivos de la ruta para el control de version
git add .
git add [nombre de archivo]
git add [ruta de carpeta]
git add [ruta/*.html] (todo aquello dentro de ruta con extension html) 

*Confirmar archivos agregados al repositorio (-m: permite agregar un mensaje descriptivo del comando a realizar)
git commit -m "Commit de estado Inicial"

*Ver diferencias de repositorio desde el ultimo commit
git diff

*Volver a la ultima version subida de todos los archivos
git checkout .

*Ver historico de cambios realizados
git log

*Remover arhivo de add
git remove .
git remove [nombre de archivo]
git remove [ruta de carpeta]
git remove [ruta/*.html] (todo aquello dentro de ruta con extension html) 

*Crear un alias
git config --global alias.l "log" (la letra l servira para llamar al comando "log")
git config --global alias.s "status" (la letra s servira para llamar al comando "status")


------------------------clase 6--------------------------

*modificar mensaje de un commit anterior:
git commit --amend -m "[nuevo mensaje]"

*cambiar nombre de archivos por medio de git
git mv [nombre de archivo con extension] [nuevo nombre con extension]

*eliminar un archivo por medio de git
git rm [nombre de archivo con extension]

*posicionarse en stage (commit) realizados
git reset --soft [id de commit]

*posicionarse en stage (commit) realizados SIN REFLEJAR LOS CAMBIOS EN LOS ARCHIVO
git reset --mixed [id de commit]

*reestablecer stage (commit) realizados
git reset --hard [id de commit]

*log historico de cambios (sin omitir nada):
git reflog


--------------------Clase 7: gitIgnore-------------------------
*Ignorar archivos:
se debe crear el archivo .gitignore, ahi se agregara las extensiones o nombres de archivos que puedas querer ignorar

-------------------Clase 8: Ramas (mergue fast-foward)--------------------------
*crear rama
git branch [nombre de nueva rama]

*cambiar rama
git checkout [nombre de rama]

*mergue (posicionarse en rama que obtendra lo nuevo)
git merge [nombre de a adicionar]

*eliminar rama secundaria
git branch -d [nombre de rama a eliminar]

*crear nueva rama y posicionarce en ella directamente
git checkout -b [nombre de rama]

*otro log
git log --oneline --decorate --all --graph

-------------------clase 9 conflicto de merge------------------
al hacer merge se debe resolver el conflicto, si se abre el archivo con un editor de texto programa anexara etiquetas tales como
>>>>>>>>>>>>>>HEAD
<<<<<<<<<<<<<<[otra rama]

los cuales denotan a que rama pertenece dicho cambios y los cuales solo deberemos borrar y designar la estructura final que tendra el archivo

-------------clase 10: crear etiqueta-----------------
*crear nombre de etiqueta
git tag [nombre de etiqueta]

*ver nombre de etiqueta que esta siendo usada
git tag

*eliminar tag
git tag -d [nombre de etiqueta]

*anexar detalle adicional a la etiqueta
git tag -a [nombre de etiqueta] -m "[mensaje adicional]"

*ver mensaje adicional
git show [nombre de etiqueta]

*etiquetar commit anteriores:
git tag -a [nombre de etiqueta] [identificador de commit en log]

------------------------clase 11: agregar github----------------
*enlazar con github y repositorio
git remote add origin [ruta que te da github al crear repositorio]

*enviar a github tus archivos: NOTA: te puede preguntar la cuenta de github
git push -u origin [rama]

*clonar repositorio ya creado en GitHub
git clone [ruta que te da github para clonar repositorio]

------------------Clase 12: Descargar ultimos cambios de repositorio-----------------
*descargar cambios hechos en github hacia tu git
git pull