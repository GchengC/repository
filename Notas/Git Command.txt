************AYUDA:
git help [comando]

*Revisar Version:
git --version

*Crear Usuario de validacion:
git config --global user.name "[nombre de usuario]"

*Crear email de usuario de validacion:
git config --global user.email "[email (no necesita ser valido)]"

*Verificar datos de usuario:
git config --global -l

*Iniciar gestion de Git
git init

*Revisar estado del repositorio
git status

*Agregar todos los archivos de la ruta para el control de version
git add .
git add [nombre de archivo]
git add [ruta de carpeta]
git add [ruta/*.html] (todo aquello dentro de ruta con extension html) 

*Confirmar archivos agregados al repositorio (-m: permite agregar un mensaje descriptivo del comando a realizar)
git commit -m "Commit de estado Inicial"

*Ver diferencias de repositorio desde el ultimo commit
git diff

*Volver a la ultima version subida de todos los archivos
git checkout .

*Ver historico de cambios realizados
git log

*Remover arhivo de add
git remove .
git remove [nombre de archivo]
git remove [ruta de carpeta]
git remove [ruta/*.html] (todo aquello dentro de ruta con extension html) 

*Crear un alias
git config --global alias.l "log" (la letra l servira para llamar al comando "log")
git config --global alias.s "status" (la letra s servira para llamar al comando "status")

*modificar mensaje de un commit anterior:
git commit --amend -m "[nuevo mensaje]"

*cambiar nombre de archivos por medio de git
git mv [nombre de archivo con extension] [nuevo nombre con extension]

*eliminar un archivo por medio de git
git rm [nombre de archivo con extension]

*posicionarse en stage (commit) realizados
git reset --soft [id de commit]

*posicionarse en stage (commit) realizados SIN REFLEJAR LOS CAMBIOS EN LOS ARCHIVO
git reset --mixed [id de commit]

*reestablecer stage (commit) realizados
git reset --hard [id de commit]

*log historico de cambios (sin omitir nada):
git reflog